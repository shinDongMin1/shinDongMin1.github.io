---
layout: post
title: 클로저
subtitle: GO
date: '2022-12-08 00:00:01 +0900'
categories: study
tags: go
image:
  path: /assets/img/study_Go/main.PNG
---

# 클로저
클로저에 대해 알아보자.

<!--more-->

## 외부 변수 접근 : 클로저
---
함수 자체를 다른 객체들과 마찬가지로 함수형으로서 매개변수와 반환값으로 쓸 수 있는 것입니다. 
이번 강의에서 배울 클로저는 함수 안에서 익명 함수를 정의해서 바깥쪽 함수에 선언한 변수에도 접근할 수 있는 함수를 말합니다.
 쉽게 말해서, 익명 함수는 클로저이기 때문에 외부 함수의 변수를 매개변수 없이 그냥 접근할 수 있습니다.

함수 안에서 함수를 정의하기 위해서 당연히 익명 함수만 쓸 수 있습니다. 
지난 강의에서 함수 자체를 매개변수로 전달받는 것은 배웠는데 함수 안에서 함수를 반환하는 것은 이번 강의인 '클로저' 챕터에서 배운다고 했습니다. 
```go
package main

import "fmt"

func next() func() int {
	i := 0
	return func() int {
		i += 1
		return i
	}
}

func main() {
	nextInt := next()

	fmt.Println(nextInt())
	fmt.Println(nextInt())
	fmt.Println(nextInt())

	newInt := next()
	fmt.Println(newInt())
}
```
 i의 연산 기능을 하는 익명 함수 안에서 i가 선언되지 않고 익명 함수 밖에 있는 변수 i를 참조하고있기 때문입니다. 익명 함수 자체가 지역 변수로 i를 갖는 것이 아니기 때문에 외부 변수 i가 상태를 계속 유지하면서 값을 1씩 증가시키는 기능을 하게 됩니다. 그리고 새로운 변수인 newInt에 새롭게 함수를 초기화하면 새로운 클로저 함수 값을 생성해 변수 i는 다시 0으로 초기화됩니다.